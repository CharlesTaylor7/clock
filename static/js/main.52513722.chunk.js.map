{"version":3,"sources":["components/clock/clock-tick/clock-tick.mp3","components/clock/clock-tick/ClockTick.js","components/clock/HourMark.js","components/clock/Clock.js","serviceWorker.js","index.js","components/app/App.js"],"names":["module","exports","__webpack_require__","p","ClockTick","_ref","tickOnChange","_useState","useState","_useState2","Object","slicedToArray","on","setOn","ref","useRef","current","src","tick","useEffect","play","react_default","a","createElement","Fragment","id","onClick","flag","HourMark","hour","key","transform","concat","x1","x2","y1","y2","stroke","strokeWidth","Clock","setNumTicks","setInterval","now","Date","hours","getHours","minuteHandPercentage","getMinutes","getSeconds","hourHandPercentage","rotate","percentage","ClockTick_ClockTick","className","xmlns","viewBox","cx","cy","r","fill","toConsumableArray","Array","keys","map","Boolean","window","location","hostname","match","ReactDOM","render","Clock_Clock","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iQCG3BC,EAAY,SAAAC,GAAsB,IAAnBC,EAAmBD,EAAnBC,aAAmBC,EAEzBC,oBAAS,GAFgBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEtCK,EAFsCH,EAAA,GAElCI,EAFkCJ,EAAA,GAKvCK,EAAMC,iBAAO,MAWnB,OAVID,EAAIE,UACNF,EAAIE,QAAQC,IAAMC,KAGpBC,oBAAU,WACJL,EAAIE,SAAWJ,GACjBE,EAAIE,QAAQI,QAEb,CAACd,IAGFe,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,SACEE,GAAG,SACHX,IAAKA,IAEPO,EAAAC,EAAAC,cAAA,UACEE,GAAG,KACHC,QAAS,kBArBMb,EAAM,SAAAc,GAAI,OAAKA,MAuB7Bf,EAAK,gBAAkB,kBC3BnBgB,EAAW,SAACC,GAAD,OACtBR,EAAAC,EAAAC,cAAA,QACEO,IAAKD,EACLE,UAAS,UAAAC,OAAmB,IAAPH,EAAa,GAAzB,aACTI,GAAG,KACHC,GAAG,KACHC,GAAG,IACHC,GAAG,KACHC,OAAO,QACPC,YAAY,OCNHC,EAAQ,WAAM,IAAAhC,EACOC,mBAAS,GADhBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACRiC,GADQ/B,EAAA,GAAAA,EAAA,IAEzBU,oBAAU,WACRsB,YAAY,WACVD,EAAY,SAAAtB,GAAI,OAAIA,EAAO,KAC1B,MACF,IAEH,IAAMwB,EAAM,IAAIC,KACVC,EAAQF,EAAIG,WAAa,GAIzBC,GAHUJ,EAAIK,aACJL,EAAIM,aAE+B,IAAO,GACpDC,GAAsBL,EAAQE,GAAwB,GAEtDI,EAAS,SAAAC,GAAU,gBAAAnB,OAAc,IAAMmB,EAApB,cACzB,OAAQ9B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACNH,EAAAC,EAAAC,cAAC6B,EAAD,CAAW9C,aAAcoC,IACzBrB,EAAAC,EAAAC,cAAA,OACE8B,UAAU,QACVC,MAAM,6BACNC,QAAQ,eAERlC,EAAAC,EAAAC,cAAA,UAAQiC,GAAG,KAAKC,GAAG,KAAKC,EAAE,KAAKrB,OAAO,QAAQC,YAAY,IAAIqB,KAAK,UACnEtC,EAAAC,EAAAC,cAAA,UAAQiC,GAAG,KAAKC,GAAG,KAAKC,EAAE,IAAIrB,OAAO,UACrChB,EAAAC,EAAAC,cAAA,QACE8B,UAAU,YACVtB,UAAWmB,EAAOD,GAClBhB,GAAG,KACHC,GAAG,KACHC,GAAG,OACHC,GAAG,KACHC,OAAO,QACPC,YAAY,MAEdjB,EAAAC,EAAAC,cAAA,QACE8B,UAAU,cACVtB,UAAWmB,EAAOJ,GAClBb,GAAG,KACHC,GAAG,KACHC,GAAG,KACHC,GAAG,KACHC,OAAO,QACPC,YAAY,MAEb5B,OAAAkD,EAAA,EAAAlD,CAAImD,MAAM,IAAIC,QAAQC,IAAInC,MCvCboC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cCFG,kBACjBF,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,OACbhC,EAAAC,EAAAC,cAACgD,EAAD,QDAY,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.52513722.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clock-tick.70ac3814.mp3\";","import React, { useRef, useState, useEffect } from 'react';\nimport tick from './clock-tick.mp3';\n\nexport const ClockTick = ({ tickOnChange }) => {\n\n  const [on, setOn] = useState(false);\n  const toggle = () => setOn(flag => !flag);\n\n  const ref = useRef(null);\n  if (ref.current) {\n    ref.current.src = tick;\n  }\n\n  useEffect(() => {\n    if (ref.current && on) {\n      ref.current.play()\n    }\n  }, [tickOnChange])\n\n  return (\n    <>\n      <audio\n        id=\"player\"\n        ref={ref}\n      />\n      <button\n        id=\"ok\"\n        onClick={() => toggle()}\n      >\n        {on ? 'Disable Sound' : 'Enable Sound'}\n      </button>\n    </>\n  );\n}\n\n","import React from 'react';\n\nexport const HourMark = (hour) => (\n  <line\n    key={hour}\n    transform={`rotate(${hour * 360 / 12}, 50, 50)`}\n    x1=\"50\"\n    x2=\"50\"\n    y1=\"8\"\n    y2=\"15\"\n    stroke=\"black\"\n    strokeWidth=\"2\"\n  />\n);","import React, { useState, useEffect } from 'react';\nimport './Clock.css';\nimport { ClockTick } from './clock-tick/ClockTick';\nimport { HourMark } from './HourMark';\n\nexport const Clock = () => {\n  const [numTicks, setNumTicks] = useState(0);\n  useEffect(() => {\n    setInterval(() => {\n      setNumTicks(tick => tick + 1);\n    }, 1000);\n  }, []);\n\n  const now = new Date();\n  const hours = now.getHours() % 12;\n  const minutes = now.getMinutes();\n  const seconds = now.getSeconds();\n\n  const minuteHandPercentage = (minutes + (seconds / 60)) / 60;\n  const hourHandPercentage = (hours + minuteHandPercentage) / 12;\n\n  const rotate = percentage => `rotate(${360 * percentage}, 50, 50)`;\n  return (<>\n    <ClockTick tickOnChange={now} />\n    <svg\n      className=\"clock\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 100 100\"\n    >\n      <circle cx=\"50\" cy=\"50\" r=\"45\" stroke=\"black\" strokeWidth=\"2\" fill=\"white\" />\n      <circle cx=\"50\" cy=\"50\" r=\"2\" stroke=\"black\" />\n      <line\n        className=\"hour-hand\"\n        transform={rotate(hourHandPercentage)}\n        x1=\"50\"\n        x2=\"50\"\n        y1=\"27.5\"\n        y2=\"50\"\n        stroke=\"black\"\n        strokeWidth=\"2\"\n      />\n      <line\n        className=\"minute-hand\"\n        transform={rotate(minuteHandPercentage)}\n        x1=\"50\"\n        x2=\"50\"\n        y1=\"20\"\n        y2=\"50\"\n        stroke=\"black\"\n        strokeWidth=\"2\"\n      />\n      {[...Array(12).keys()].map(HourMark)}\n    </svg>\n  </>);\n};\n\n\n\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './components/app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Clock } from '../clock/Clock';\r\n\r\nexport const App = () => (\r\n  <div className=\"App\">\r\n    <Clock />\r\n  </div>\r\n);\r\n"],"sourceRoot":""}