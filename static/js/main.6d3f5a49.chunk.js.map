{"version":3,"sources":["App.js","serviceWorker.js","index.js","clock-tick.mp3"],"names":["TickSound","_ref","on","react_default","a","createElement","lib_default","url","tick","playStatus","HourMark","hour","key","transform","concat","x1","x2","y1","y2","stroke","strokeWidth","date","Date","App","_useState","useState","_useState2","Object","slicedToArray","now","setNow","useEffect","setInterval","hours","getHours","minuteHandPercentage","getMinutes","getSeconds","hourHandPercentage","rotate","percentage","className","App_TickSound","xmlns","viewBox","cx","cy","r","fill","toConsumableArray","Array","keys","map","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"4OAQMA,EAAY,SAAAC,KAAGC,GAAH,OAChBC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEG,IAAKC,IACLC,WAAY,aAIVC,EAAW,SAACC,GAAD,OACfR,EAAAC,EAAAC,cAAA,QACEO,IAAKD,EACLE,UAAS,UAAAC,OAAmB,IAAPH,EAAa,GAAzB,aACTI,GAAG,KACHC,GAAG,KACHC,GAAG,IACHC,GAAG,KACHC,OAAO,QACPC,YAAY,OAIVC,EAAO,IAAIC,KAuDFC,EAtDH,WAAM,IAAAC,EACMC,mBAASJ,GADfK,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTK,EADSH,EAAA,GACJI,EADIJ,EAAA,GAEhBK,oBAAU,WACRC,YAAY,WACVF,EAAO,IAAIR,OACV,MACF,IAEH,IAAMW,EAAQJ,EAAIK,WAAa,GAIzBC,GAHUN,EAAIO,aACJP,EAAIQ,aAE+B,IAAO,GACpDC,GAAsBL,EAAQE,GAAwB,GAEtDI,EAAS,SAAAC,GAAU,gBAAA1B,OAAc,IAAM0B,EAApB,cACzB,OACErC,EAAAC,EAAAC,cAAA,OAAKoC,UAAU,OACbtC,EAAAC,EAAAC,cAAA,UAAQoC,UAAU,cAChBtC,EAAAC,EAAAC,cAACqC,EAAD,CAAWxC,GAAI2B,IACf1B,EAAAC,EAAAC,cAAA,OACEoC,UAAU,QACVE,MAAM,6BACNC,QAAQ,eAERzC,EAAAC,EAAAC,cAAA,UAAQwC,GAAG,KAAKC,GAAG,KAAKC,EAAE,KAAK5B,OAAO,QAAQC,YAAY,IAAI4B,KAAK,UACnE7C,EAAAC,EAAAC,cAAA,UAAQwC,GAAG,KAAKC,GAAG,KAAKC,EAAE,IAAI5B,OAAO,UACrChB,EAAAC,EAAAC,cAAA,QACEoC,UAAU,YACV5B,UAAW0B,EAAOD,GAClBvB,GAAG,KACHC,GAAG,KACHC,GAAG,KACHC,GAAG,KACHC,OAAO,QACPC,YAAY,MAEdjB,EAAAC,EAAAC,cAAA,QACEoC,UAAU,cACV5B,UAAW0B,EAAOJ,GAClBpB,GAAG,KACHC,GAAG,KACHC,GAAG,OACHC,GAAG,KACHC,OAAO,QACPC,YAAY,MAEbO,OAAAsB,EAAA,EAAAtB,CAAIuB,MAAM,IAAIC,QAAQC,IAAI1C,OChEjB2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.6d3f5a49.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport * as Rx from 'rxjs/operators';\r\nimport * as Observable from 'rxjs';\r\nimport { fromFetch } from 'rxjs/fetch';\r\nimport './App.css';\r\nimport tick from './clock-tick.mp3';\r\nimport Sound from 'react-sound';\r\n\r\nconst TickSound = ({ on }) => (\r\n  <Sound\r\n    url={tick}\r\n    playStatus={\"PLAYING\"}\r\n  />\r\n);\r\n\r\nconst HourMark = (hour) => (\r\n  <line\r\n    key={hour}\r\n    transform={`rotate(${hour * 360 / 12}, 50, 50)`}\r\n    x1=\"50\"\r\n    x2=\"50\"\r\n    y1=\"8\"\r\n    y2=\"15\"\r\n    stroke=\"black\"\r\n    strokeWidth=\"2\"\r\n  />\r\n);\r\n\r\nconst date = new Date();\r\nconst App = () => {\r\n  const [now, setNow] = useState(date);\r\n  useEffect(() => {\r\n    setInterval(() => {\r\n      setNow(new Date());\r\n    }, 1000);\r\n  }, []);\r\n\r\n  const hours = now.getHours() % 12;\r\n  const minutes = now.getMinutes();\r\n  const seconds = now.getSeconds();\r\n\r\n  const minuteHandPercentage = (minutes + (seconds / 60)) / 60;\r\n  const hourHandPercentage = (hours + minuteHandPercentage) / 12;\r\n\r\n  const rotate = percentage => `rotate(${360 * percentage}, 50, 50)`;\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <TickSound on={now} />\r\n        <svg\r\n          className=\"clock\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox=\"0 0 100 100\"\r\n        >\r\n          <circle cx=\"50\" cy=\"50\" r=\"45\" stroke=\"black\" strokeWidth=\"2\" fill=\"white\" />\r\n          <circle cx=\"50\" cy=\"50\" r=\"2\" stroke=\"black\" />\r\n          <line\r\n            className=\"hour-hand\"\r\n            transform={rotate(hourHandPercentage)}\r\n            x1=\"50\"\r\n            x2=\"50\"\r\n            y1=\"20\"\r\n            y2=\"50\"\r\n            stroke=\"black\"\r\n            strokeWidth=\"2\"\r\n          />\r\n          <line\r\n            className=\"minute-hand\"\r\n            transform={rotate(minuteHandPercentage)}\r\n            x1=\"50\"\r\n            x2=\"50\"\r\n            y1=\"27.5\"\r\n            y2=\"50\"\r\n            stroke=\"black\"\r\n            strokeWidth=\"2\"\r\n          />\r\n          {[...Array(12).keys()].map(HourMark)}\r\n        </svg>\r\n      </header>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/clock-tick.70ac3814.mp3\";"],"sourceRoot":""}