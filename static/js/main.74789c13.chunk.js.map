{"version":3,"sources":["components/sound-button/sound-enabled.svg","components/sound-button/sound-disabled.svg","assets/clock-tick.mp3","components/clock/HourMark.js","components/clock/Clock.js","components/sound-button/SoundButton.js","components/icon-attribution/IconAttribution.js","components/app/App.js","serviceWorker.js","api/time.js","sagas/fetchTime.js","sagas/clockTick.js","index.js","reducers/index.js"],"names":["module","exports","__webpack_require__","p","HourMark","hour","react_default","a","createElement","key","transform","concat","x1","x2","y1","y2","stroke","strokeWidth","Clock","connect","state","soundOn","time","_ref","hours","getHours","minuteHandPercentage","getMinutes","getSeconds","hourHandPercentage","rotate","percentage","className","xmlns","viewBox","cx","cy","r","fill","Object","toConsumableArray","Array","keys","map","SoundButton","dispatch","icon","soundEnabledIcon","soundDisabledIcon","src","onClick","type","on","IconAttribution","href","title","target","App","useEffect","sound_button_SoundButton_SoundButton","clock_Clock_Clock","IconAttribution_IconAttribution","Boolean","window","location","hostname","match","api_time","fetch","then","res","json","Date","currentDateTime","worker","_callee","regenerator_default","wrap","_context","prev","next","takeEvery","stop","_marked","_context2","call","fetchTime","sent","put","delay","t0","error","_marked2","clockTick_callee","takeLatest","clockTick_marked","audio","Audio","tickSound","action","apply","play","clockTick_marked2","this","composeEnhancers","composeWithDevTools","initialState","sagaMiddleware","createSagaMiddleware","store","createStore","R","applyMiddleware","run","fetchTimeSaga","clockTickSaga","ReactDOM","render","es","app_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.74789c13.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sound-enabled.47e222f8.svg\";","module.exports = __webpack_public_path__ + \"static/media/sound-disabled.36171613.svg\";","module.exports = __webpack_public_path__ + \"static/media/clock-tick.70ac3814.mp3\";","import React from 'react';\n\nexport const HourMark = (hour) => (\n  <line\n    key={hour}\n    transform={`rotate(${hour * 360 / 12}, 50, 50)`}\n    x1=\"50\"\n    x2=\"50\"\n    y1=\"8\"\n    y2=\"15\"\n    stroke=\"black\"\n    strokeWidth=\"2\"\n  />\n);","import React from 'react';\r\nimport './Clock.css';\r\nimport { HourMark } from './HourMark';\r\nimport { connect } from 'react-redux';\r\n\r\nconst _Clock = ({ time }) => {\r\n  const hours = time.getHours() % 12;\r\n  const minutes = time.getMinutes();\r\n  const seconds = time.getSeconds();\r\n\r\n  const minuteHandPercentage = (minutes + (seconds / 60)) / 60;\r\n  const hourHandPercentage = (hours + minuteHandPercentage) / 12;\r\n\r\n  const rotate = percentage => `rotate(${360 * percentage}, 50, 50)`;\r\n  return (\r\n    <svg\r\n      className=\"clock\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      viewBox=\"0 0 100 100\"\r\n    >\r\n      <circle cx=\"50\" cy=\"50\" r=\"45\" stroke=\"black\" strokeWidth=\"2\" fill=\"white\" />\r\n      <circle cx=\"50\" cy=\"50\" r=\"2\" stroke=\"black\" />\r\n      <line\r\n        className=\"hour-hand\"\r\n        transform={rotate(hourHandPercentage)}\r\n        x1=\"50\"\r\n        x2=\"50\"\r\n        y1=\"27.5\"\r\n        y2=\"50\"\r\n        stroke=\"black\"\r\n        strokeWidth=\"2\"\r\n      />\r\n      <line\r\n        className=\"minute-hand\"\r\n        transform={rotate(minuteHandPercentage)}\r\n        x1=\"50\"\r\n        x2=\"50\"\r\n        y1=\"20\"\r\n        y2=\"50\"\r\n        stroke=\"black\"\r\n        strokeWidth=\"2\"\r\n      />\r\n      {[...Array(12).keys()].map(HourMark)}\r\n    </svg>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  soundOn: state.soundOn,\r\n  time: state.time,\r\n});\r\n\r\nexport const Clock = connect(mapStateToProps)(_Clock);\r\n","import React from 'react'\r\nimport './SoundButton.css';\r\nimport soundEnabledIcon from './sound-enabled.svg'\r\nimport soundDisabledIcon from './sound-disabled.svg'\r\nimport { connect } from 'react-redux'\r\n\r\nconst _SoundButton = ({ soundOn, dispatch }) => {\r\n\r\n  const toggleSound = () =>\r\n    dispatch({ type: 'SET_SOUND', on: !soundOn });\r\n\r\n  const icon = soundOn ? soundEnabledIcon : soundDisabledIcon;\r\n\r\n  return (\r\n    <img\r\n      className=\"sound-button\"\r\n      src={icon}\r\n      onClick={toggleSound}\r\n    />\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  soundOn: state.soundOn\r\n});\r\n\r\nexport const SoundButton = connect(\r\n  mapStateToProps\r\n)(_SoundButton);\r\n","import React from 'react'\nimport './IconAttribution.css';\n\nexport const IconAttribution = () => (\n  <div className=\"icon-attribution\">\n    Sound icons made by <a href=\"https://www.flaticon.com/authors/smashicons\" title=\"Smashicons\">Smashicons</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a> is licensed by <a href=\"http://creativecommons.org/licenses/by/3.0/\"                 title=\"Creative Commons BY 3.0\" target=\"_blank\">CC 3.0 BY</a>\n  </div>\n);","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport { Clock } from '../clock/Clock';\r\nimport { SoundButton } from '../sound-button/SoundButton';\r\nimport { IconAttribution } from '../icon-attribution/IconAttribution';\r\nimport { connect } from 'react-redux';\r\n\r\nconst _App = ({ dispatch }) => {\r\n  useEffect(() => {\r\n    dispatch({ type: 'REQUEST_TIME' });\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <SoundButton />\r\n      <Clock />\r\n      <IconAttribution />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const App = connect()(_App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export default () =>\r\n  fetch('https://worldclockapi.com/api/json/est/now')\r\n    .then(res => res.json())\r\n    .then(json => new Date(json.currentDateTime));\r\n","import { call, put, takeEvery, delay } from 'redux-saga/effects'\r\nimport fetchTime from '../api/time'\r\n\r\nexport default function*() {\r\n  yield takeEvery('REQUEST_TIME', worker);\r\n};\r\n\r\nfunction* worker() {\r\n  try {\r\n     const time = yield call(fetchTime);\r\n     yield put({ type: 'SET_TIME', time });\r\n     yield delay(1000);\r\n     yield put({ type: 'REQUEST_TIME' });\r\n  } catch (error) {\r\n     yield put({ type: 'SET_ERROR', error });\r\n  }\r\n}\r\n","import { apply, takeLatest, delay } from 'redux-saga/effects'\r\n\r\nimport tickSound from '../assets/clock-tick.mp3'\r\n\r\nexport default function*() {\r\n  yield takeLatest('SET_SOUND', worker);\r\n};\r\n\r\nconst audio = new Audio(tickSound);\r\n\r\nfunction* worker(action) {\r\n  if (action.on) {\r\n    yield delay(300);\r\n    while (true) {\r\n      yield apply(audio, play);\r\n      yield delay(1000);\r\n    }\r\n  }\r\n}\r\n\r\nfunction play() {\r\n  this.play();\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\nimport { App } from './components/app/App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport rootReducer from './reducers'\r\nimport fetchTimeSaga from './sagas/fetchTime'\r\nimport clockTickSaga from './sagas/clockTick'\r\n\r\nimport './index.css'\r\n\r\nconst composeEnhancers = composeWithDevTools({});\r\n\r\nconst initialState = {\r\n  time: new Date(2000, 1, 1, 0, 0)\r\n};\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeEnhancers(\r\n    applyMiddleware(sagaMiddleware)\r\n  ),\r\n);\r\n\r\nsagaMiddleware.run(fetchTimeSaga);\r\nsagaMiddleware.run(clockTickSaga);\r\n\r\nReactDOM.render(\r\n  <Provider store={store} >\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import * as R from 'ramda'\r\n\r\nexport default (state, action) => {\r\n  switch(action.type) {\r\n    case 'SET_TIME':\r\n      return R.set(R.lensProp('time'), action.time, state);\r\n    case 'SET_ERROR':\r\n      return R.set(R.lensProp('error'), action.error, state);\r\n    case 'SET_SOUND':\r\n      return R.set(R.lensProp('soundOn'), action.on, state);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"],"sourceRoot":""}