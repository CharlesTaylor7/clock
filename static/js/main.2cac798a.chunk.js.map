{"version":3,"sources":["components/clock/clock-tick/clock-tick.mp3","components/sound-button/sound-enabled.svg","components/sound-button/sound-disabled.svg","components/clock/clock-tick/ClockTick.js","components/clock/HourMark.js","components/clock/Clock.js","components/sound-button/SoundButton.js","components/icon-attribution/IconAttribution.js","serviceWorker.js","index.js","components/app/App.js","hooks/useToggle.js"],"names":["module","exports","__webpack_require__","p","ClockTick","_ref","tickOnChange","on","ref","useRef","current","src","tickSound","useEffect","play","react_default","a","createElement","Fragment","id","HourMark","hour","key","transform","concat","x1","x2","y1","y2","stroke","strokeWidth","Clock","soundOn","_useState","useState","_useState2","Object","slicedToArray","setNumTicks","setInterval","tick","now","Date","hours","getHours","minuteHandPercentage","getMinutes","getSeconds","hourHandPercentage","rotate","percentage","ClockTick_ClockTick","className","xmlns","viewBox","cx","cy","r","fill","toConsumableArray","Array","keys","map","SoundButton","toggleSound","icon","soundEnabledIcon","soundDisabledIcon","onClick","IconAttribution","href","title","target","Boolean","window","location","hostname","match","ReactDOM","render","_useToggle","initial","setOn","flag","useToggle","_useToggle2","SoundButton_SoundButton","Clock_Clock","IconAttribution_IconAttribution","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2cac798a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clock-tick.70ac3814.mp3\";","module.exports = __webpack_public_path__ + \"static/media/sound-enabled.a53e1845.svg\";","module.exports = __webpack_public_path__ + \"static/media/sound-disabled.40992a0f.svg\";","import React, { useRef, useState, useEffect } from 'react';\nimport tickSound from './clock-tick.mp3';\n\nexport const ClockTick = ({ tickOnChange, on }) => {\n\n  const ref = useRef(null);\n  if (ref.current && !ref.current.src) {\n    ref.current.src = tickSound;\n  }\n\n  useEffect(() => {\n    if (ref.current && on) {\n      ref.current.play()\n    }\n  // We don't want to tick immediately after the on button is pressed.\n  // Otherwise, you can get a double-tick sound.\n  // We want the ticking sound to be exclusively synced with the tickOnChange prop.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tickOnChange])\n\n  return (\n    <>\n      <audio\n        id=\"player\"\n        ref={ref}\n      />\n    </>\n  );\n}\n\n","import React from 'react';\n\nexport const HourMark = (hour) => (\n  <line\n    key={hour}\n    transform={`rotate(${hour * 360 / 12}, 50, 50)`}\n    x1=\"50\"\n    x2=\"50\"\n    y1=\"8\"\n    y2=\"15\"\n    stroke=\"black\"\n    strokeWidth=\"2\"\n  />\n);","import React, { useState, useEffect } from 'react';\nimport './Clock.css';\nimport { ClockTick } from './clock-tick/ClockTick';\nimport { HourMark } from './HourMark';\n\nexport const Clock = ({ soundOn }) => {\n  const [numTicks, setNumTicks] = useState(0);\n\n  useEffect(() => {\n    setInterval(() => {\n      setNumTicks(tick => tick + 1);\n    }, 1000);\n  }, []);\n\n  const now = new Date();\n  const hours = now.getHours() % 12;\n  const minutes = now.getMinutes();\n  const seconds = now.getSeconds();\n\n  const minuteHandPercentage = (minutes + (seconds / 60)) / 60;\n  const hourHandPercentage = (hours + minuteHandPercentage) / 12;\n\n  const rotate = percentage => `rotate(${360 * percentage}, 50, 50)`;\n  return (<>\n    <ClockTick tickOnChange={now} on={soundOn} />\n    <svg\n      className=\"clock\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 100 100\"\n    >\n      <circle cx=\"50\" cy=\"50\" r=\"45\" stroke=\"black\" strokeWidth=\"2\" fill=\"white\" />\n      <circle cx=\"50\" cy=\"50\" r=\"2\" stroke=\"black\" />\n      <line\n        className=\"hour-hand\"\n        transform={rotate(hourHandPercentage)}\n        x1=\"50\"\n        x2=\"50\"\n        y1=\"27.5\"\n        y2=\"50\"\n        stroke=\"black\"\n        strokeWidth=\"2\"\n      />\n      <line\n        className=\"minute-hand\"\n        transform={rotate(minuteHandPercentage)}\n        x1=\"50\"\n        x2=\"50\"\n        y1=\"20\"\n        y2=\"50\"\n        stroke=\"black\"\n        strokeWidth=\"2\"\n      />\n      {[...Array(12).keys()].map(HourMark)}\n    </svg>\n  </>);\n};\n\n\n\n","import React from 'react'\nimport './SoundButton.css';\nimport soundEnabledIcon from './sound-enabled.svg'\nimport soundDisabledIcon from './sound-disabled.svg'\n\nexport const SoundButton = ({ soundOn, toggleSound }) => {\n\n  const icon = soundOn ? soundEnabledIcon : soundDisabledIcon;\n\n  return (\n    <img\n      className=\"sound-button\"\n      src={icon}\n      onClick={toggleSound}\n    />\n  )\n}","import React from 'react'\nimport './IconAttribution.css';\n\nexport const IconAttribution = () => (\n  <div className=\"icon-attribution\">\n    Sound icons made by <a href=\"https://www.flaticon.com/authors/smashicons\" title=\"Smashicons\">Smashicons</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a> is licensed by <a href=\"http://creativecommons.org/licenses/by/3.0/\"                 title=\"Creative Commons BY 3.0\" target=\"_blank\">CC 3.0 BY</a>\n  </div>\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\nimport { Clock } from '../clock/Clock';\nimport { useToggle } from '../../hooks/useToggle';\nimport { SoundButton } from '../sound-button/SoundButton';\nimport { IconAttribution } from '../icon-attribution/IconAttribution';\nexport const App = () => {\n  const [soundOn, toggleSound] = useToggle(false);\n\n  return (\n    <div className=\"App\">\n      <SoundButton soundOn={soundOn} toggleSound={toggleSound} />\n      <Clock soundOn={soundOn} />\n      <IconAttribution />\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nexport const useToggle = initial => {\n  const [on, setOn] = useState(initial);\n  const toggle = () => setOn(flag => !flag);\n\n  return [on, toggle];\n}"],"sourceRoot":""}